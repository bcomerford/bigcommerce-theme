{
  "_args": [
    [
      {
        "raw": "validetta@github:pixelunion/validetta#v2.0.3",
        "scope": null,
        "escapedName": "validetta",
        "name": "validetta",
        "rawSpec": "github:pixelunion/validetta#v2.0.3",
        "spec": "github:pixelunion/validetta#v2.0.3",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:pixelunion/validetta.git#v2.0.3",
          "sshUrl": "git+ssh://git@github.com/pixelunion/validetta.git#v2.0.3",
          "httpsUrl": "git+https://github.com/pixelunion/validetta.git#v2.0.3",
          "gitUrl": "git://github.com/pixelunion/validetta.git#v2.0.3",
          "shortcut": "github:pixelunion/validetta#v2.0.3",
          "directUrl": "https://raw.githubusercontent.com/pixelunion/validetta/v2.0.3/package.json"
        }
      },
      "/Users/brandon/Projects/sacred-art/theme-development/big-commerce"
    ]
  ],
  "_from": "pixelunion/validetta#v2.0.3",
  "_id": "validetta@2.0.3",
  "_inCache": true,
  "_location": "/validetta",
  "_phantomChildren": {},
  "_requested": {
    "raw": "validetta@github:pixelunion/validetta#v2.0.3",
    "scope": null,
    "escapedName": "validetta",
    "name": "validetta",
    "rawSpec": "github:pixelunion/validetta#v2.0.3",
    "spec": "github:pixelunion/validetta#v2.0.3",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:pixelunion/validetta.git#v2.0.3",
      "sshUrl": "git+ssh://git@github.com/pixelunion/validetta.git#v2.0.3",
      "httpsUrl": "git+https://github.com/pixelunion/validetta.git#v2.0.3",
      "gitUrl": "git://github.com/pixelunion/validetta.git#v2.0.3",
      "shortcut": "github:pixelunion/validetta#v2.0.3",
      "directUrl": "https://raw.githubusercontent.com/pixelunion/validetta/v2.0.3/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/pixelunion/validetta.git#68375ae457a08cb3f72c9a6efcd9a1407c4e2188",
  "_shasum": "5421324120c47366e2f8cad1d2fd7c8a0febd48b",
  "_shrinkwrap": null,
  "_spec": "validetta@github:pixelunion/validetta#v2.0.3",
  "_where": "/Users/brandon/Projects/sacred-art/theme-development/big-commerce",
  "author": {
    "name": "Hasan AydoÄŸdu",
    "email": "hasan_aydogdu@windowslive.com",
    "url": "http://www.hasanaydogdu.com"
  },
  "bugs": {
    "url": "http://github.com/PixelUnion/validetta/issues"
  },
  "dependencies": {},
  "description": "A tiny jquery plugin for validate your forms",
  "devDependencies": {
    "browser-sync": "^2.9.10",
    "del": "^2.0.2",
    "gulp": "^3.9.0",
    "gulp-concat-util": "^0.5.2",
    "gulp-header": "^1.7.1",
    "gulp-remove-code": "^1.0.2",
    "gulp-rename": "^1.2.2",
    "gulp-ruby-sass": "^2.0.4",
    "gulp-uglify": "^1.4.1"
  },
  "gitHead": "68375ae457a08cb3f72c9a6efcd9a1407c4e2188",
  "homepage": "https://github.com/PixelUnion/validetta",
  "jspm": {
    "shim": {
      "dist/validetta": {
        "deps": [
          "jquery"
        ],
        "exports": "$"
      }
    }
  },
  "keywords": [
    "form",
    "lightweight",
    "validetta",
    "validate",
    "validation",
    "validator"
  ],
  "license": {
    "type": "MIT",
    "url": "https://github.com/hsnayd/validetta/blob/master/LICENCE"
  },
  "main": "dist/validetta",
  "name": "validetta",
  "optionalDependencies": {},
  "readme": "# Validetta\n\nClient-side validation of your forms.\n\n98% indebted to [the original plugin.](http://lab.hasanaydogdu.com/validetta)\n\n## Usage\n``` js\n$(function(){\n\t$('#my-form').validetta(options, customMessages);\n});\n```\n### Options\n\n``` js\nvar options = {\n  showErrorMessages: true,\n  // Whether or not to show error messages\n\n  showMultiple: false\n  // whether or not to show all validity errors per input at once\n\n  disableNative: true\n  // By default the plugin will apply a 'novalidate' attribute to the target form\n\n  validationClass: 'form-input',\n  // Class of elements to be validated\n\n  inputWrapperClass: 'form-field',\n  // Class of the parent container we want to append the error message to\n\n  errorTemplateClass: 'form-inline-message',\n  // Class of the error message string\n\n  errorClass: 'form-field-invalid',\n  // Class added to parent of each failing validation field\n\n  validClass: 'form-field-valid',\n  // Class added to parent of each successful validation field\n\n  realTime: false,\n  // Enable real-time form control, rather than waiting until submit\n\n  onValid: function(){},\n  // Callback on submit if the form passes validation\n\n  onError: function(){},\n  // Callback on submit if the form fails validation\n\n  validators: {},\n  // Any additional custom validators\n}\n```\n\n\n### Available validators\n\n| Name | Description |\n| --- | --- |\n| `required` | Validates on the existence of a value at all. Will also run by default on any inputs with a `required` attribute|\n| `number` | Validates on whether the value is a number. Additionally, if either a `max` or `min` attribute (or both) exist on the input, it validates on whether the number falls within that range. Will also run by default on any inputs of `type=\"number\"`|\n| `email` | Validates an email if it is valid or not, using the regex defined in [this spec](https://html.spec.whatwg.org/multipage/forms.html#states-of-the-type-attribute).  Will also run by default on any inputs of `type=\"email\"`|\n| `creditCard` | Validates a credit cart number |\n| `equalTo[input_name]` | Returns valid if the the two fields are equal to each other. |\n| `different[input_name]` | Returns valid if the the two fields are _not_ equal to each other. |\n| `minLength[x]` | Returns valid if the value has a min-length of x. |\n| `maxLength[x]` | Returns valid if the value has a max-length of x. |\n| `minChecked[x]` | (for checkboxes) Returns valid if the number of inputs checked is greater than x. |\n| `maxChecked[x]` | (for checkboxes) Returns valid if the number of inputs checked is less than x. |\n| `minSelected[x]` | (for select-multiple) Returns valid if the number of options selected is greater than x. |\n| `maxSelected[x]` | (for select-multiple) Returns valid if the number of options selected is less than x. |\n| `regExp[validator_name]` | Validates on whether a value matches against a supplied regex expression or not. (check the [original docs](http://lab.hasanaydogdu.com/validetta/#documentation))|\n| `remote[validator_name]` | Validates using a remote validator (check the [original docs](http://lab.hasanaydogdu.com/validetta/#documentation)) |\n| `custom[validator_name]` | Validates based on a function defined in the `validators: {}` plugin option |\n\n#### A note about selects\n\nFor `<input type=\"select\">` to work with the required validator, you'll need to add a dummy option with an empty value like so: `<option disabled selected value=\"\">Pick one...</option>`. Otherwise it will pull the first option value and assume the input is valid.\n\n### Defining validators\n\nadd a `data-validates=\"\"` attribute to your input, with a comma-separated list of validators.\n\n``` html\n<input name=\"my_email\" type=\"email\" data-validates=\"required,email\">\n\n<input name=\"my_password\" type=\"password\" data-validates=\"required\" placeholder=\"enter your new password\">\n\n<input name=\"my_password_again\" type=\"password\" data-validates=\"required,equalTo[my_password]\" placeholder=\"enter your new password again\">\n```\n\n### Custom error messages\n\nTo override the default error messages, pass an object as the second argument to Validetta. Here are the available messages and their defaults:\n``` js\nvar customMessages = {\n  required  : 'This field is required.',\n  email     : 'Your E-mail address appears to be invalid.',\n  number    : 'You can enter only numbers in this field.',\n  numMax    : 'Please enter a number less than {max}.',\n  numMin    : 'Please enter a number greater than {min}.',\n  numRange  : 'Please enter a number greater than {min} and less than {max}.',\n  maxLength : 'Maximum {count} characters allowed.',\n  minLength : 'Minimum {count} characters allowed.',\n  maxChecked  : 'Maximum {count} options allowed.',\n  minChecked  : 'Please select minimum {count} options.',\n  maxSelected : 'Maximum {count} selection allowed.',\n  minSelected : 'Minimum {count} selection allowed.',\n  notEqual    : 'Fields do not match.',\n  different   : 'Fields cannot be the same as each other',\n  creditCard  : 'Invalid credit card number.',\n};\n```\n\nYou can also define a custom message inline, with `data-vd-message[validator_name]`:\n\n``` html\n<input type=\"text\" data-validates=\"minLength[30]\" data-vd-message-minLength=\"Whoa whoa that's way too short!\">\n```\n\nFor the number validator, the strings `{min}` and `{max}` will be replaced appropriately.\n\n\n\n### More detailed documentation\n[Original Documentation is here](http://lab.hasanaydogdu.com/validetta/#documentation), with some demos. These still mostly apply. They are also written in charmin broken english.\n\n\n## Further development\nThe plugin is built with gulp and includes a demo server for ease of development/testing:\n\n``` shell\n$ npm install -g gulp\n$ cd path_to_repo\n$ npm install\n```\n\n`gulp build` should be run before each version bump. Or all the time. Or maybe we need a develop branch, I am not sure\n\n`gulp serve` will spin up a demo server with browsersync.\n\n### Todos\n - More validators, more input types (`type=\"tel\"`?)\n - More documentation here as to what is different from the root repo\n\n## License\n\nMIT licensed\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PixelUnion/validetta.git"
  },
  "version": "2.0.3"
}
